package diglol.crypto

import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import kotlin.test.fail
import kotlinx.coroutines.test.runTest

@OptIn(ExperimentalUnsignedTypes::class)
class SipHashTest {

  //https://github.com/veorq/SipHash/blob/master/vectors.h
  private val siphashSamples = listOf(
    ubyteArrayOf(0x31U, 0x0eU, 0x0eU, 0xddU, 0x47U, 0xdbU, 0x6fU, 0x72U),
    ubyteArrayOf(0xfdU, 0x67U, 0xdcU, 0x93U, 0xc5U, 0x39U, 0xf8U, 0x74U),
    ubyteArrayOf(0x5aU, 0x4fU, 0xa9U, 0xd9U, 0x09U, 0x80U, 0x6cU, 0x0dU),
    ubyteArrayOf(0x2dU, 0x7eU, 0xfbU, 0xd7U, 0x96U, 0x66U, 0x67U, 0x85U),
    ubyteArrayOf(0xb7U, 0x87U, 0x71U, 0x27U, 0xe0U, 0x94U, 0x27U, 0xcfU),
    ubyteArrayOf(0x8dU, 0xa6U, 0x99U, 0xcdU, 0x64U, 0x55U, 0x76U, 0x18U),
    ubyteArrayOf(0xceU, 0xe3U, 0xfeU, 0x58U, 0x6eU, 0x46U, 0xc9U, 0xcbU),
    ubyteArrayOf(0x37U, 0xd1U, 0x01U, 0x8bU, 0xf5U, 0x00U, 0x02U, 0xabU),
    ubyteArrayOf(0x62U, 0x24U, 0x93U, 0x9aU, 0x79U, 0xf5U, 0xf5U, 0x93U),
    ubyteArrayOf(0xb0U, 0xe4U, 0xa9U, 0x0bU, 0xdfU, 0x82U, 0x00U, 0x9eU),
    ubyteArrayOf(0xf3U, 0xb9U, 0xddU, 0x94U, 0xc5U, 0xbbU, 0x5dU, 0x7aU),
    ubyteArrayOf(0xa7U, 0xadU, 0x6bU, 0x22U, 0x46U, 0x2fU, 0xb3U, 0xf4U),
    ubyteArrayOf(0xfbU, 0xe5U, 0x0eU, 0x86U, 0xbcU, 0x8fU, 0x1eU, 0x75U),
    ubyteArrayOf(0x90U, 0x3dU, 0x84U, 0xc0U, 0x27U, 0x56U, 0xeaU, 0x14U),
    ubyteArrayOf(0xeeU, 0xf2U, 0x7aU, 0x8eU, 0x90U, 0xcaU, 0x23U, 0xf7U),
    ubyteArrayOf(0xe5U, 0x45U, 0xbeU, 0x49U, 0x61U, 0xcaU, 0x29U, 0xa1U),
    ubyteArrayOf(0xdbU, 0x9bU, 0xc2U, 0x57U, 0x7fU, 0xccU, 0x2aU, 0x3fU),
    ubyteArrayOf(0x94U, 0x47U, 0xbeU, 0x2cU, 0xf5U, 0xe9U, 0x9aU, 0x69U),
    ubyteArrayOf(0x9cU, 0xd3U, 0x8dU, 0x96U, 0xf0U, 0xb3U, 0xc1U, 0x4bU),
    ubyteArrayOf(0xbdU, 0x61U, 0x79U, 0xa7U, 0x1dU, 0xc9U, 0x6dU, 0xbbU),
    ubyteArrayOf(0x98U, 0xeeU, 0xa2U, 0x1aU, 0xf2U, 0x5cU, 0xd6U, 0xbeU),
    ubyteArrayOf(0xc7U, 0x67U, 0x3bU, 0x2eU, 0xb0U, 0xcbU, 0xf2U, 0xd0U),
    ubyteArrayOf(0x88U, 0x3eU, 0xa3U, 0xe3U, 0x95U, 0x67U, 0x53U, 0x93U),
    ubyteArrayOf(0xc8U, 0xceU, 0x5cU, 0xcdU, 0x8cU, 0x03U, 0x0cU, 0xa8U),
    ubyteArrayOf(0x94U, 0xafU, 0x49U, 0xf6U, 0xc6U, 0x50U, 0xadU, 0xb8U),
    ubyteArrayOf(0xeaU, 0xb8U, 0x85U, 0x8aU, 0xdeU, 0x92U, 0xe1U, 0xbcU),
    ubyteArrayOf(0xf3U, 0x15U, 0xbbU, 0x5bU, 0xb8U, 0x35U, 0xd8U, 0x17U),
    ubyteArrayOf(0xadU, 0xcfU, 0x6bU, 0x07U, 0x63U, 0x61U, 0x2eU, 0x2fU),
    ubyteArrayOf(0xa5U, 0xc9U, 0x1dU, 0xa7U, 0xacU, 0xaaU, 0x4dU, 0xdeU),
    ubyteArrayOf(0x71U, 0x65U, 0x95U, 0x87U, 0x66U, 0x50U, 0xa2U, 0xa6U),
    ubyteArrayOf(0x28U, 0xefU, 0x49U, 0x5cU, 0x53U, 0xa3U, 0x87U, 0xadU),
    ubyteArrayOf(0x42U, 0xc3U, 0x41U, 0xd8U, 0xfaU, 0x92U, 0xd8U, 0x32U),
    ubyteArrayOf(0xceU, 0x7cU, 0xf2U, 0x72U, 0x2fU, 0x51U, 0x27U, 0x71U),
    ubyteArrayOf(0xe3U, 0x78U, 0x59U, 0xf9U, 0x46U, 0x23U, 0xf3U, 0xa7U),
    ubyteArrayOf(0x38U, 0x12U, 0x05U, 0xbbU, 0x1aU, 0xb0U, 0xe0U, 0x12U),
    ubyteArrayOf(0xaeU, 0x97U, 0xa1U, 0x0fU, 0xd4U, 0x34U, 0xe0U, 0x15U),
    ubyteArrayOf(0xb4U, 0xa3U, 0x15U, 0x08U, 0xbeU, 0xffU, 0x4dU, 0x31U),
    ubyteArrayOf(0x81U, 0x39U, 0x62U, 0x29U, 0xf0U, 0x90U, 0x79U, 0x02U),
    ubyteArrayOf(0x4dU, 0x0cU, 0xf4U, 0x9eU, 0xe5U, 0xd4U, 0xdcU, 0xcaU),
    ubyteArrayOf(0x5cU, 0x73U, 0x33U, 0x6aU, 0x76U, 0xd8U, 0xbfU, 0x9aU),
    ubyteArrayOf(0xd0U, 0xa7U, 0x04U, 0x53U, 0x6bU, 0xa9U, 0x3eU, 0x0eU),
    ubyteArrayOf(0x92U, 0x59U, 0x58U, 0xfcU, 0xd6U, 0x42U, 0x0cU, 0xadU),
    ubyteArrayOf(0xa9U, 0x15U, 0xc2U, 0x9bU, 0xc8U, 0x06U, 0x73U, 0x18U),
    ubyteArrayOf(0x95U, 0x2bU, 0x79U, 0xf3U, 0xbcU, 0x0aU, 0xa6U, 0xd4U),
    ubyteArrayOf(0xf2U, 0x1dU, 0xf2U, 0xe4U, 0x1dU, 0x45U, 0x35U, 0xf9U),
    ubyteArrayOf(0x87U, 0x57U, 0x75U, 0x19U, 0x04U, 0x8fU, 0x53U, 0xa9U),
    ubyteArrayOf(0x10U, 0xa5U, 0x6cU, 0xf5U, 0xdfU, 0xcdU, 0x9aU, 0xdbU),
    ubyteArrayOf(0xebU, 0x75U, 0x09U, 0x5cU, 0xcdU, 0x98U, 0x6cU, 0xd0U),
    ubyteArrayOf(0x51U, 0xa9U, 0xcbU, 0x9eU, 0xcbU, 0xa3U, 0x12U, 0xe6U),
    ubyteArrayOf(0x96U, 0xafU, 0xadU, 0xfcU, 0x2cU, 0xe6U, 0x66U, 0xc7U),
    ubyteArrayOf(0x72U, 0xfeU, 0x52U, 0x97U, 0x5aU, 0x43U, 0x64U, 0xeeU),
    ubyteArrayOf(0x5aU, 0x16U, 0x45U, 0xb2U, 0x76U, 0xd5U, 0x92U, 0xa1U),
    ubyteArrayOf(0xb2U, 0x74U, 0xcbU, 0x8eU, 0xbfU, 0x87U, 0x87U, 0x0aU),
    ubyteArrayOf(0x6fU, 0x9bU, 0xb4U, 0x20U, 0x3dU, 0xe7U, 0xb3U, 0x81U),
    ubyteArrayOf(0xeaU, 0xecU, 0xb2U, 0xa3U, 0x0bU, 0x22U, 0xa8U, 0x7fU),
    ubyteArrayOf(0x99U, 0x24U, 0xa4U, 0x3cU, 0xc1U, 0x31U, 0x57U, 0x24U),
    ubyteArrayOf(0xbdU, 0x83U, 0x8dU, 0x3aU, 0xafU, 0xbfU, 0x8dU, 0xb7U),
    ubyteArrayOf(0x0bU, 0x1aU, 0x2aU, 0x32U, 0x65U, 0xd5U, 0x1aU, 0xeaU),
    ubyteArrayOf(0x13U, 0x50U, 0x79U, 0xa3U, 0x23U, 0x1cU, 0xe6U, 0x60U),
    ubyteArrayOf(0x93U, 0x2bU, 0x28U, 0x46U, 0xe4U, 0xd7U, 0x06U, 0x66U),
    ubyteArrayOf(0xe1U, 0x91U, 0x5fU, 0x5cU, 0xb1U, 0xecU, 0xa4U, 0x6cU),
    ubyteArrayOf(0xf3U, 0x25U, 0x96U, 0x5cU, 0xa1U, 0x6dU, 0x62U, 0x9fU),
    ubyteArrayOf(0x57U, 0x5fU, 0xf2U, 0x8eU, 0x60U, 0x38U, 0x1bU, 0xe5U),
    ubyteArrayOf(0x72U, 0x45U, 0x06U, 0xebU, 0x4cU, 0x32U, 0x8aU, 0x95U),
  )

  @Test
  fun siphash() = runTest {
    val key = SipKey(ByteArray(16) { it.toByte() })
    siphashSamples.forEachIndexed { index, expected ->
      assertEquals(
        SipHash.hash(key, ByteArray(index) { it.toByte() }),
        expected.toByteArray().toLong(0),
        index.toString()
      )
    }
  }

  @Test
  fun shouldThrow_whenInvalidKey_used() {
    val invalidKeySizes = listOf(0, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19)
    invalidKeySizes.forEach { length ->
      try {
        SipKey(ByteArray(length))
        fail("Key needs to be 8 bytes for HalfSipHash or 16 bytes for SipHash. Current key is: $length")
      } catch (invalid: IllegalArgumentException) {
        assertTrue(true, "$invalid")
      }
    }
  }
}
