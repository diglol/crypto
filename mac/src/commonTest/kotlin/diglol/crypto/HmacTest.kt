package diglol.crypto

import diglol.encoding.decodeHexToBytes
import kotlin.test.Test
import kotlin.test.assertContentEquals
import kotlin.test.assertTrue
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.runTest

@OptIn(ExperimentalCoroutinesApi::class)
class HmacTest {
  // https://csrc.nist.gov/groups/ST/toolkit/examples.html
  private val hmacSha1Samples = listOf(
    Triple(
      byteArrayOf(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
      ),
      "Sample message for keylen=blocklen".encodeToByteArray(),
      "5fd596ee78d5553c8ff4e72d266dfd192366da29".decodeHexToBytes()
    ),
    Triple(
      byteArrayOf(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13,
      ),
      "Sample message for keylen<blocklen".encodeToByteArray(),
      "4c99ff0cb1b31bd33f8431dbaf4d17fcd356a807".decodeHexToBytes()
    ),
    Triple(
      byteArrayOf(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
        0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
        0x60, 0x61, 0x62, 0x63,
      ),
      "Sample message for keylen=blocklen".encodeToByteArray(),
      "2d51b2f7750e410584662e38f133435f4c4fd42a".decodeHexToBytes()
    )
  )

  private val hmacSha256Samples = listOf(
    Triple(
      byteArrayOf(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
      ),
      "Sample message for keylen=blocklen".encodeToByteArray(),
      "8bb9a1db9806f20df7f77b82138c7914d174d59e13dc4d0169c9057b133e1d62".decodeHexToBytes()
    ),
    Triple(
      byteArrayOf(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
      ),
      "Sample message for keylen<blocklen".encodeToByteArray(),
      "a28cf43130ee696a98f14a37678b56bcfcbdd9e5cf69717fecf5480f0ebdf790".decodeHexToBytes()
    ),
    Triple(
      byteArrayOf(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
        0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
        0x60, 0x61, 0x62, 0x63,
      ),
      "Sample message for keylen=blocklen".encodeToByteArray(),
      "bdccb6c72ddeadb500ae768386cb38cc41c63dbb0878ddb9c7a38a431b78378d".decodeHexToBytes()
    )
  )

  private val hmacSha384Samples = listOf(
    Triple(
      byteArrayOf(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
        0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
        0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
        0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
        0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
      ),
      "Sample message for keylen=blocklen".encodeToByteArray(),
      "63c5daa5e651847ca897c95814ab830bededc7d25e83eef9195cd45857a37f448947858f5af50cc2b1b730ddf29671a9".decodeHexToBytes()
    ),
    Triple(
      byteArrayOf(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
      ),
      "Sample message for keylen<blocklen".encodeToByteArray(),
      "6eb242bdbb582ca17bebfa481b1e23211464d2b7f8c20b9ff2201637b93646af5ae9ac316e98db45d9cae773675eeed0".decodeHexToBytes()
    ),
    Triple(
      byteArrayOf(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
        0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
        0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
        0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
        0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
        0x80.toByte(), 0x81.toByte(), 0x82.toByte(), 0x83.toByte(),
        0x84.toByte(), 0x85.toByte(), 0x86.toByte(), 0x87.toByte(),
        0x88.toByte(), 0x89.toByte(), 0x8a.toByte(), 0x8b.toByte(),
        0x8c.toByte(), 0x8d.toByte(), 0x8e.toByte(), 0x8f.toByte(),
        0x90.toByte(), 0x91.toByte(), 0x92.toByte(), 0x93.toByte(),
        0x94.toByte(), 0x95.toByte(), 0x96.toByte(), 0x97.toByte(),
        0x98.toByte(), 0x99.toByte(), 0x9a.toByte(), 0x9b.toByte(),
        0x9c.toByte(), 0x9d.toByte(), 0x9e.toByte(), 0x9f.toByte(),
        0xa0.toByte(), 0xa1.toByte(), 0xa2.toByte(), 0xa3.toByte(),
        0xa4.toByte(), 0xa5.toByte(), 0xa6.toByte(), 0xa7.toByte(),
        0xa8.toByte(), 0xa9.toByte(), 0xaa.toByte(), 0xab.toByte(),
        0xac.toByte(), 0xad.toByte(), 0xae.toByte(), 0xaf.toByte(),
        0xb0.toByte(), 0xb1.toByte(), 0xb2.toByte(), 0xb3.toByte(),
        0xb4.toByte(), 0xb5.toByte(), 0xb6.toByte(), 0xb7.toByte(),
        0xb8.toByte(), 0xb9.toByte(), 0xba.toByte(), 0xbb.toByte(),
        0xbc.toByte(), 0xbd.toByte(), 0xbe.toByte(), 0xbf.toByte(),
        0xc0.toByte(), 0xc1.toByte(), 0xc2.toByte(), 0xc3.toByte(),
        0xc4.toByte(), 0xc5.toByte(), 0xc6.toByte(), 0xc7.toByte(),
      ),
      "Sample message for keylen=blocklen".encodeToByteArray(),
      "5b664436df69b0ca22551231a3f0a3d5b4f97991713cfa84bff4d0792eff96c27dccbbb6f79b65d548b40e8564cef594".decodeHexToBytes()
    )
  )

  private val hmacSha512Samples = listOf(
    Triple(
      byteArrayOf(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
        0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
        0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
        0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
        0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
      ),
      "Sample message for keylen=blocklen".encodeToByteArray(),
      "fc25e240658ca785b7a811a8d3f7b4ca48cfa26a8a366bf2cd1f836b05fcb024bd36853081811d6cea4216ebad79da1cfcb95ea4586b8a0ce356596a55fb1347".decodeHexToBytes()
    ),
    Triple(
      byteArrayOf(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
      ),
      "Sample message for keylen<blocklen".encodeToByteArray(),
      "fd44c18bda0bb0a6ce0e82b031bf2818f6539bd56ec00bdc10a8a2d730b3634de2545d639b0f2cf710d0692c72a1896f1f211c2b922d1a96c392e07e7ea9fedc".decodeHexToBytes()
    ),
    Triple(
      byteArrayOf(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
        0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
        0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
        0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
        0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
        0x80.toByte(), 0x81.toByte(), 0x82.toByte(), 0x83.toByte(),
        0x84.toByte(), 0x85.toByte(), 0x86.toByte(), 0x87.toByte(),
        0x88.toByte(), 0x89.toByte(), 0x8a.toByte(), 0x8b.toByte(),
        0x8c.toByte(), 0x8d.toByte(), 0x8e.toByte(), 0x8f.toByte(),
        0x90.toByte(), 0x91.toByte(), 0x92.toByte(), 0x93.toByte(),
        0x94.toByte(), 0x95.toByte(), 0x96.toByte(), 0x97.toByte(),
        0x98.toByte(), 0x99.toByte(), 0x9a.toByte(), 0x9b.toByte(),
        0x9c.toByte(), 0x9d.toByte(), 0x9e.toByte(), 0x9f.toByte(),
        0xa0.toByte(), 0xa1.toByte(), 0xa2.toByte(), 0xa3.toByte(),
        0xa4.toByte(), 0xa5.toByte(), 0xa6.toByte(), 0xa7.toByte(),
        0xa8.toByte(), 0xa9.toByte(), 0xaa.toByte(), 0xab.toByte(),
        0xac.toByte(), 0xad.toByte(), 0xae.toByte(), 0xaf.toByte(),
        0xb0.toByte(), 0xb1.toByte(), 0xb2.toByte(), 0xb3.toByte(),
        0xb4.toByte(), 0xb5.toByte(), 0xb6.toByte(), 0xb7.toByte(),
        0xb8.toByte(), 0xb9.toByte(), 0xba.toByte(), 0xbb.toByte(),
        0xbc.toByte(), 0xbd.toByte(), 0xbe.toByte(), 0xbf.toByte(),
        0xc0.toByte(), 0xc1.toByte(), 0xc2.toByte(), 0xc3.toByte(),
        0xc4.toByte(), 0xc5.toByte(), 0xc6.toByte(), 0xc7.toByte(),
      ),
      "Sample message for keylen=blocklen".encodeToByteArray(),
      "d93ec8d2de1ad2a9957cb9b83f14e76ad6b5e0cce285079a127d3b14bccb7aa7286d4ac0d4ce64215f2bc9e6870b33d97438be4aaa20cda5c5a912b48b8e27f3".decodeHexToBytes()
    )
  )

  @Test
  fun hmacSha1() = runTest {
    hmacSha1Samples.forEachIndexed { index, (key, data, expect) ->
      val hmac = Hmac(Hmac.Type.SHA1, key)
      val actual = hmac.compute(data)
      assertContentEquals(expect, actual)
      assertTrue(hmac.verify(expect!!, data), index.toString())
    }
  }

  @Test
  fun hmacSha256() = runTest {
    hmacSha256Samples.forEachIndexed { index, (key, data, expect) ->
      val hmac = Hmac(Hmac.Type.SHA256, key)
      val actual = hmac.compute(data)
      assertContentEquals(expect, actual)
      assertTrue(hmac.verify(expect!!, data), index.toString())
    }
  }

  @Test
  fun hmacSha384() = runTest {
    hmacSha384Samples.forEachIndexed { index, (key, data, expect) ->
      val hmac = Hmac(Hmac.Type.SHA384, key)
      val actual = hmac.compute(data)
      assertContentEquals(expect, actual)
      assertTrue(hmac.verify(expect!!, data), index.toString())
    }
  }

  @Test
  fun hmacSha512() = runTest {
    hmacSha512Samples.forEachIndexed { index, (key, data, expect) ->
      val hmac = Hmac(Hmac.Type.SHA512, key)
      val actual = hmac.compute(data)
      assertContentEquals(expect, actual)
      assertTrue(hmac.verify(expect!!, data), index.toString())
    }
  }
}
